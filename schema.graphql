### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Blog {
  blog_content: String!
  blog_title: String!
  blog_url: String
  colleges(filters: CollegeFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CollegeRelationResponseCollection
  countries(filters: CountryFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CountryRelationResponseCollection
  courses(filters: CourseFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CourseRelationResponseCollection
  createdAt: DateTime
  exams(filters: ExamFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ExamRelationResponseCollection
  excerpt: String!
  featured_image: UploadFileEntityResponse!
  is_featured: Boolean
  is_top: Boolean
  publishedAt: DateTime
  scholarship(filters: ScholarshipFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ScholarshipRelationResponseCollection
  scholarships(filters: ScholarshipFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ScholarshipRelationResponseCollection
  seo: ComponentCommonSeo
  tags(filters: TagFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): TagRelationResponseCollection
  updatedAt: DateTime
}

type BlogEntity {
  attributes: Blog
  id: ID
}

type BlogEntityResponse {
  data: BlogEntity
}

type BlogEntityResponseCollection {
  data: [BlogEntity!]!
  meta: ResponseCollectionMeta!
}

input BlogFiltersInput {
  and: [BlogFiltersInput]
  blog_content: StringFilterInput
  blog_title: StringFilterInput
  blog_url: StringFilterInput
  colleges: CollegeFiltersInput
  countries: CountryFiltersInput
  courses: CourseFiltersInput
  createdAt: DateTimeFilterInput
  exams: ExamFiltersInput
  excerpt: StringFilterInput
  id: IDFilterInput
  is_featured: BooleanFilterInput
  is_top: BooleanFilterInput
  not: BlogFiltersInput
  or: [BlogFiltersInput]
  publishedAt: DateTimeFilterInput
  scholarship: ScholarshipFiltersInput
  scholarships: ScholarshipFiltersInput
  seo: ComponentCommonSeoFiltersInput
  tags: TagFiltersInput
  updatedAt: DateTimeFilterInput
}

input BlogInput {
  blog_content: String
  blog_title: String
  blog_url: String
  colleges: [ID]
  countries: [ID]
  courses: [ID]
  exams: [ID]
  excerpt: String
  featured_image: ID
  is_featured: Boolean
  is_top: Boolean
  publishedAt: DateTime
  scholarship: [ID]
  scholarships: [ID]
  seo: ComponentCommonSeoInput
  tags: [ID]
}

type BlogRelationResponseCollection {
  data: [BlogEntity!]!
}

input BooleanFilterInput {
  and: [Boolean]
  between: [Boolean]
  contains: Boolean
  containsi: Boolean
  endsWith: Boolean
  eq: Boolean
  eqi: Boolean
  gt: Boolean
  gte: Boolean
  in: [Boolean]
  lt: Boolean
  lte: Boolean
  ne: Boolean
  nei: Boolean
  not: BooleanFilterInput
  notContains: Boolean
  notContainsi: Boolean
  notIn: [Boolean]
  notNull: Boolean
  null: Boolean
  or: [Boolean]
  startsWith: Boolean
}

type Button {
  colleges(filters: CollegeFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CollegeRelationResponseCollection
  createdAt: DateTime
  href: String!
  publishedAt: DateTime
  text: String!
  updatedAt: DateTime
}

type ButtonEntity {
  attributes: Button
  id: ID
}

type ButtonEntityResponse {
  data: ButtonEntity
}

type ButtonEntityResponseCollection {
  data: [ButtonEntity!]!
  meta: ResponseCollectionMeta!
}

input ButtonFiltersInput {
  and: [ButtonFiltersInput]
  colleges: CollegeFiltersInput
  createdAt: DateTimeFilterInput
  href: StringFilterInput
  id: IDFilterInput
  not: ButtonFiltersInput
  or: [ButtonFiltersInput]
  publishedAt: DateTimeFilterInput
  text: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input ButtonInput {
  colleges: [ID]
  href: String
  publishedAt: DateTime
  text: String
}

type ButtonRelationResponseCollection {
  data: [ButtonEntity!]!
}

type City {
  city_name: String!
  college(filters: CollegeFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CollegeRelationResponseCollection
  createdAt: DateTime
  publishedAt: DateTime
  state: StateEntityResponse
  updatedAt: DateTime
}

type CityEntity {
  attributes: City
  id: ID
}

type CityEntityResponse {
  data: CityEntity
}

type CityEntityResponseCollection {
  data: [CityEntity!]!
  meta: ResponseCollectionMeta!
}

input CityFiltersInput {
  and: [CityFiltersInput]
  city_name: StringFilterInput
  college: CollegeFiltersInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: CityFiltersInput
  or: [CityFiltersInput]
  publishedAt: DateTimeFilterInput
  state: StateFiltersInput
  updatedAt: DateTimeFilterInput
}

input CityInput {
  city_name: String
  college: [ID]
  publishedAt: DateTime
  state: ID
}

type CityRelationResponseCollection {
  data: [CityEntity!]!
}

type College {
  approved_by(filters: OrganisationFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): OrganisationRelationResponseCollection
  banner: UploadFileEntityResponse!
  blogs(filters: BlogFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): BlogRelationResponseCollection
  button: ButtonEntityResponse
  city: CityEntityResponse
  college_name: String!
  college_url: String
  country: CountryEntityResponse
  courses(filters: ComponentCourseCourseFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentCourseCourse]
  createdAt: DateTime
  dawonload_brochure(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection!
  degrees(filters: DegreeFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): DegreeRelationResponseCollection
  discussion_forums(filters: DiscussionForumFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): DiscussionForumRelationResponseCollection
  gallery(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection!
  is_featured: Boolean
  is_top: Boolean!
  lists(filters: ListFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ListRelationResponseCollection
  logo: UploadFileEntityResponse!
  news(filters: NewFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): NewRelationResponseCollection
  page_data: [CollegePageDataDynamicZone]
  pin_code: Int!
  popular_company(filters: PopularCompanyFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): PopularCompanyRelationResponseCollection
  publishedAt: DateTime
  ranking_by(filters: RankingBodyFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): RankingBodyRelationResponseCollection
  review_component: ComponentCommonReviewComponent!
  scholarships(filters: ScholarshipFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ScholarshipRelationResponseCollection
  seo: ComponentCommonSeo
  specializations(filters: SpecializationFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): SpecializationRelationResponseCollection
  states: StateEntityResponse
  step: StepEntityResponse
  streams(filters: StreamFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): StreamRelationResponseCollection
  testimonial(filters: TestimonialFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): TestimonialRelationResponseCollection
  testimonials(filters: TestimonialFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): TestimonialRelationResponseCollection
  updatedAt: DateTime
  user_forms(filters: UserFormFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): UserFormRelationResponseCollection
}

type CollegeEntity {
  attributes: College
  id: ID
}

type CollegeEntityResponse {
  data: CollegeEntity
}

type CollegeEntityResponseCollection {
  data: [CollegeEntity!]!
  meta: ResponseCollectionMeta!
}

input CollegeFiltersInput {
  and: [CollegeFiltersInput]
  approved_by: OrganisationFiltersInput
  blogs: BlogFiltersInput
  button: ButtonFiltersInput
  city: CityFiltersInput
  college_name: StringFilterInput
  college_url: StringFilterInput
  country: CountryFiltersInput
  courses: ComponentCourseCourseFiltersInput
  createdAt: DateTimeFilterInput
  degrees: DegreeFiltersInput
  discussion_forums: DiscussionForumFiltersInput
  id: IDFilterInput
  is_featured: BooleanFilterInput
  is_top: BooleanFilterInput
  lists: ListFiltersInput
  news: NewFiltersInput
  not: CollegeFiltersInput
  or: [CollegeFiltersInput]
  pin_code: IntFilterInput
  popular_company: PopularCompanyFiltersInput
  publishedAt: DateTimeFilterInput
  ranking_by: RankingBodyFiltersInput
  review_component: ComponentCommonReviewComponentFiltersInput
  scholarships: ScholarshipFiltersInput
  seo: ComponentCommonSeoFiltersInput
  specializations: SpecializationFiltersInput
  states: StateFiltersInput
  step: StepFiltersInput
  streams: StreamFiltersInput
  testimonial: TestimonialFiltersInput
  testimonials: TestimonialFiltersInput
  updatedAt: DateTimeFilterInput
  user_forms: UserFormFiltersInput
}

input CollegeInput {
  approved_by: [ID]
  banner: ID
  blogs: [ID]
  button: ID
  city: ID
  college_name: String
  college_url: String
  country: ID
  courses: [ComponentCourseCourseInput]
  dawonload_brochure: [ID]
  degrees: [ID]
  discussion_forums: [ID]
  gallery: [ID]
  is_featured: Boolean
  is_top: Boolean
  lists: [ID]
  logo: ID
  news: [ID]
  page_data: [CollegePageDataDynamicZoneInput!]
  pin_code: Int
  popular_company: [ID]
  publishedAt: DateTime
  ranking_by: [ID]
  review_component: ComponentCommonReviewComponentInput
  scholarships: [ID]
  seo: ComponentCommonSeoInput
  specializations: [ID]
  states: ID
  step: ID
  streams: [ID]
  testimonial: [ID]
  testimonials: [ID]
  user_forms: [ID]
}

union CollegePageDataDynamicZone = ComponentCommonBannerComponent | ComponentCommonFaq | ComponentCommonGallery | ComponentCommonNewOverview | ComponentCommonRecommendedCollege | Error

scalar CollegePageDataDynamicZoneInput

type CollegeRelationResponseCollection {
  data: [CollegeEntity!]!
}

type CollegesType {
  college_type: String!
  course: CourseEntityResponse
  createdAt: DateTime
  publishedAt: DateTime
  updatedAt: DateTime
}

type CollegesTypeEntity {
  attributes: CollegesType
  id: ID
}

type CollegesTypeEntityResponse {
  data: CollegesTypeEntity
}

type CollegesTypeEntityResponseCollection {
  data: [CollegesTypeEntity!]!
  meta: ResponseCollectionMeta!
}

input CollegesTypeFiltersInput {
  and: [CollegesTypeFiltersInput]
  college_type: StringFilterInput
  course: CourseFiltersInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: CollegesTypeFiltersInput
  or: [CollegesTypeFiltersInput]
  publishedAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
}

input CollegesTypeInput {
  college_type: String
  course: ID
  publishedAt: DateTime
}

type CollegesTypeRelationResponseCollection {
  data: [CollegesTypeEntity!]!
}

type ComponentCollegesTitle {
  id: ID!
  t1: String!
  t2: String!
  t3: String!
}

input ComponentCollegesTitleFiltersInput {
  and: [ComponentCollegesTitleFiltersInput]
  not: ComponentCollegesTitleFiltersInput
  or: [ComponentCollegesTitleFiltersInput]
  t1: StringFilterInput
  t2: StringFilterInput
  t3: StringFilterInput
}

input ComponentCollegesTitleInput {
  id: ID
  t1: String
  t2: String
  t3: String
}

type ComponentCommonApplicationDate {
  endDate: Date
  id: ID!
  startDate: Date
}

input ComponentCommonApplicationDateFiltersInput {
  and: [ComponentCommonApplicationDateFiltersInput]
  endDate: DateFilterInput
  not: ComponentCommonApplicationDateFiltersInput
  or: [ComponentCommonApplicationDateFiltersInput]
  startDate: DateFilterInput
}

input ComponentCommonApplicationDateInput {
  endDate: Date
  id: ID
  startDate: Date
}

type ComponentCommonBanner1 {
  button: ComponentCommonButton
  id: ID!
  text1: String!
  title: String!
}

input ComponentCommonBanner1FiltersInput {
  and: [ComponentCommonBanner1FiltersInput]
  button: ComponentCommonButtonFiltersInput
  not: ComponentCommonBanner1FiltersInput
  or: [ComponentCommonBanner1FiltersInput]
  text1: StringFilterInput
  title: StringFilterInput
}

input ComponentCommonBanner1Input {
  button: ComponentCommonButtonInput
  id: ID
  text1: String
  title: String
}

type ComponentCommonBanner2 {
  bg(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection!
  id: ID!
  steps(filters: StepFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): StepRelationResponseCollection
  text: String!
  title: ComponentCollegesTitle
}

input ComponentCommonBanner2FiltersInput {
  and: [ComponentCommonBanner2FiltersInput]
  not: ComponentCommonBanner2FiltersInput
  or: [ComponentCommonBanner2FiltersInput]
  steps: StepFiltersInput
  text: StringFilterInput
  title: ComponentCollegesTitleFiltersInput
}

input ComponentCommonBanner2Input {
  bg: [ID]
  id: ID
  steps: [ID]
  text: String
  title: ComponentCollegesTitleInput
}

type ComponentCommonBannerComponent {
  button_text: String
  description: String
  heading: String
  id: ID!
  section(filters: CollegeFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CollegeRelationResponseCollection
}

input ComponentCommonBannerComponentFiltersInput {
  and: [ComponentCommonBannerComponentFiltersInput]
  button_text: StringFilterInput
  description: StringFilterInput
  heading: StringFilterInput
  not: ComponentCommonBannerComponentFiltersInput
  or: [ComponentCommonBannerComponentFiltersInput]
  section: CollegeFiltersInput
}

input ComponentCommonBannerComponentInput {
  button_text: String
  description: String
  heading: String
  id: ID
  section: [ID]
}

type ComponentCommonBlogsAndOthers {
  id: ID!
}

input ComponentCommonBlogsAndOthersFiltersInput {
  and: [ComponentCommonBlogsAndOthersFiltersInput]
  not: ComponentCommonBlogsAndOthersFiltersInput
  or: [ComponentCommonBlogsAndOthersFiltersInput]
}

input ComponentCommonBlogsAndOthersInput {
  id: ID
}

type ComponentCommonButton {
  bgImg(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection!
  href: String!
  id: ID!
  text: String!
}

type ComponentCommonButton1 {
  href: String!
  id: ID!
  text: String!
}

input ComponentCommonButton1FiltersInput {
  and: [ComponentCommonButton1FiltersInput]
  href: StringFilterInput
  not: ComponentCommonButton1FiltersInput
  or: [ComponentCommonButton1FiltersInput]
  text: StringFilterInput
}

input ComponentCommonButton1Input {
  href: String
  id: ID
  text: String
}

type ComponentCommonButton2 {
  href: String!
  id: ID!
  text: String!
}

input ComponentCommonButton2FiltersInput {
  and: [ComponentCommonButton2FiltersInput]
  href: StringFilterInput
  not: ComponentCommonButton2FiltersInput
  or: [ComponentCommonButton2FiltersInput]
  text: StringFilterInput
}

input ComponentCommonButton2Input {
  href: String
  id: ID
  text: String
}

input ComponentCommonButtonFiltersInput {
  and: [ComponentCommonButtonFiltersInput]
  href: StringFilterInput
  not: ComponentCommonButtonFiltersInput
  or: [ComponentCommonButtonFiltersInput]
  text: StringFilterInput
}

input ComponentCommonButtonInput {
  bgImg: [ID]
  href: String
  id: ID
  text: String
}

type ComponentCommonCard1 {
  icon: UploadFileEntityResponse!
  id: ID!
  text: String!
  title: String!
}

input ComponentCommonCard1FiltersInput {
  and: [ComponentCommonCard1FiltersInput]
  not: ComponentCommonCard1FiltersInput
  or: [ComponentCommonCard1FiltersInput]
  text: StringFilterInput
  title: StringFilterInput
}

input ComponentCommonCard1Input {
  icon: ID
  id: ID
  text: String
  title: String
}

type ComponentCommonCard2 {
  icon: UploadFileEntityResponse!
  id: ID!
  text: String!
  title: String!
}

input ComponentCommonCard2FiltersInput {
  and: [ComponentCommonCard2FiltersInput]
  not: ComponentCommonCard2FiltersInput
  or: [ComponentCommonCard2FiltersInput]
  text: StringFilterInput
  title: StringFilterInput
}

input ComponentCommonCard2Input {
  icon: ID
  id: ID
  text: String
  title: String
}

type ComponentCommonCard3 {
  icon: UploadFileEntityResponse!
  id: ID!
  text: String!
  title: String!
}

input ComponentCommonCard3FiltersInput {
  and: [ComponentCommonCard3FiltersInput]
  not: ComponentCommonCard3FiltersInput
  or: [ComponentCommonCard3FiltersInput]
  text: StringFilterInput
  title: StringFilterInput
}

input ComponentCommonCard3Input {
  icon: ID
  id: ID
  text: String
  title: String
}

type ComponentCommonColleges {
  collegeName: String!
  degreeType(filters: DegreeFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): DegreeRelationResponseCollection
  icon(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection!
  id: ID!
  id_no: Int
  img(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection!
  text1: String!
  title: String!
}

input ComponentCommonCollegesFiltersInput {
  and: [ComponentCommonCollegesFiltersInput]
  collegeName: StringFilterInput
  degreeType: DegreeFiltersInput
  id_no: IntFilterInput
  not: ComponentCommonCollegesFiltersInput
  or: [ComponentCommonCollegesFiltersInput]
  text1: StringFilterInput
  title: StringFilterInput
}

input ComponentCommonCollegesInput {
  collegeName: String
  degreeType: [ID]
  icon: [ID]
  id: ID
  id_no: Int
  img: [ID]
  text1: String
  title: String
}

type ComponentCommonCounsellingPackages {
  CounsellingPackagesCards: ComponentCommonCounsellingPackagesCards
  id: ID!
  title: String!
}

type ComponentCommonCounsellingPackagesCards {
  PackageName: String!
  button: ButtonEntityResponse
  icon(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection!
  id: ID!
  id_no: String!
  isPopular: Boolean!
  list: ListEntityResponse
  price: Int!
  text1: String!
}

input ComponentCommonCounsellingPackagesCardsFiltersInput {
  PackageName: StringFilterInput
  and: [ComponentCommonCounsellingPackagesCardsFiltersInput]
  button: ButtonFiltersInput
  id_no: StringFilterInput
  isPopular: BooleanFilterInput
  list: ListFiltersInput
  not: ComponentCommonCounsellingPackagesCardsFiltersInput
  or: [ComponentCommonCounsellingPackagesCardsFiltersInput]
  price: IntFilterInput
  text1: StringFilterInput
}

input ComponentCommonCounsellingPackagesCardsInput {
  PackageName: String
  button: ID
  icon: [ID]
  id: ID
  id_no: String
  isPopular: Boolean
  list: ID
  price: Int
  text1: String
}

input ComponentCommonCounsellingPackagesFiltersInput {
  CounsellingPackagesCards: ComponentCommonCounsellingPackagesCardsFiltersInput
  and: [ComponentCommonCounsellingPackagesFiltersInput]
  not: ComponentCommonCounsellingPackagesFiltersInput
  or: [ComponentCommonCounsellingPackagesFiltersInput]
  title: StringFilterInput
}

input ComponentCommonCounsellingPackagesInput {
  CounsellingPackagesCards: ComponentCommonCounsellingPackagesCardsInput
  id: ID
  title: String
}

type ComponentCommonDislikes {
  id: ID!
  title: String
}

input ComponentCommonDislikesFiltersInput {
  and: [ComponentCommonDislikesFiltersInput]
  not: ComponentCommonDislikesFiltersInput
  or: [ComponentCommonDislikesFiltersInput]
  title: StringFilterInput
}

input ComponentCommonDislikesInput {
  id: ID
  title: String
}

type ComponentCommonFaq {
  id: ID!
  questions(filters: ComponentFaqFaqElementsFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentFaqFaqElements]
  section: String
}

input ComponentCommonFaqFiltersInput {
  and: [ComponentCommonFaqFiltersInput]
  not: ComponentCommonFaqFiltersInput
  or: [ComponentCommonFaqFiltersInput]
  questions: ComponentFaqFaqElementsFiltersInput
  section: StringFilterInput
}

input ComponentCommonFaqInput {
  id: ID
  questions: [ComponentFaqFaqElementsInput]
  section: String
}

type ComponentCommonField {
  field_label: String
  filed_type: ENUM_COMPONENTCOMMONFIELD_FILED_TYPE
  id: ID!
}

input ComponentCommonFieldFiltersInput {
  and: [ComponentCommonFieldFiltersInput]
  field_label: StringFilterInput
  filed_type: StringFilterInput
  not: ComponentCommonFieldFiltersInput
  or: [ComponentCommonFieldFiltersInput]
}

input ComponentCommonFieldInput {
  field_label: String
  filed_type: ENUM_COMPONENTCOMMONFIELD_FILED_TYPE
  id: ID
}

type ComponentCommonFormStape {
  field(filters: ComponentCommonFieldFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentCommonField]
  id: ID!
  step_banner(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
  step_description(filters: ComponentCommonStepDescriptionFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentCommonStepDescription]
  step_heading: String
  step_label: String
}

input ComponentCommonFormStapeFiltersInput {
  and: [ComponentCommonFormStapeFiltersInput]
  field: ComponentCommonFieldFiltersInput
  not: ComponentCommonFormStapeFiltersInput
  or: [ComponentCommonFormStapeFiltersInput]
  step_description: ComponentCommonStepDescriptionFiltersInput
  step_heading: StringFilterInput
  step_label: StringFilterInput
}

input ComponentCommonFormStapeInput {
  field: [ComponentCommonFieldInput]
  id: ID
  step_banner: [ID]
  step_description: [ComponentCommonStepDescriptionInput]
  step_heading: String
  step_label: String
}

type ComponentCommonGallery {
  gallery(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
  id: ID!
  section: String
}

input ComponentCommonGalleryFiltersInput {
  and: [ComponentCommonGalleryFiltersInput]
  not: ComponentCommonGalleryFiltersInput
  or: [ComponentCommonGalleryFiltersInput]
  section: StringFilterInput
}

input ComponentCommonGalleryInput {
  gallery: [ID]
  id: ID
  section: String
}

type ComponentCommonGoogleAds {
  id: ID!
  section: String
}

input ComponentCommonGoogleAdsFiltersInput {
  and: [ComponentCommonGoogleAdsFiltersInput]
  not: ComponentCommonGoogleAdsFiltersInput
  or: [ComponentCommonGoogleAdsFiltersInput]
  section: StringFilterInput
}

input ComponentCommonGoogleAdsInput {
  id: ID
  section: String
}

type ComponentCommonHomebanner {
  button1: ComponentCommonButton1
  button2: ComponentCommonButton2
  id: ID!
  img(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection!
  text1: String!
  text2: String!
  text3: String!
  title: ComponentCommonTitle
}

input ComponentCommonHomebannerFiltersInput {
  and: [ComponentCommonHomebannerFiltersInput]
  button1: ComponentCommonButton1FiltersInput
  button2: ComponentCommonButton2FiltersInput
  not: ComponentCommonHomebannerFiltersInput
  or: [ComponentCommonHomebannerFiltersInput]
  text1: StringFilterInput
  text2: StringFilterInput
  text3: StringFilterInput
  title: ComponentCommonTitleFiltersInput
}

input ComponentCommonHomebannerInput {
  button1: ComponentCommonButton1Input
  button2: ComponentCommonButton2Input
  id: ID
  img: [ID]
  text1: String
  text2: String
  text3: String
  title: ComponentCommonTitleInput
}

type ComponentCommonLikes {
  id: ID!
  title: String
}

input ComponentCommonLikesFiltersInput {
  and: [ComponentCommonLikesFiltersInput]
  not: ComponentCommonLikesFiltersInput
  or: [ComponentCommonLikesFiltersInput]
  title: StringFilterInput
}

input ComponentCommonLikesInput {
  id: ID
  title: String
}

type ComponentCommonNavItem {
  id: ID!
  title: String
}

input ComponentCommonNavItemFiltersInput {
  and: [ComponentCommonNavItemFiltersInput]
  not: ComponentCommonNavItemFiltersInput
  or: [ComponentCommonNavItemFiltersInput]
  title: StringFilterInput
}

input ComponentCommonNavItemInput {
  id: ID
  title: String
}

type ComponentCommonNavbar {
  id: ID!
  nav_item(filters: ComponentCommonNavItemFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentCommonNavItem]
  section: String
}

input ComponentCommonNavbarFiltersInput {
  and: [ComponentCommonNavbarFiltersInput]
  nav_item: ComponentCommonNavItemFiltersInput
  not: ComponentCommonNavbarFiltersInput
  or: [ComponentCommonNavbarFiltersInput]
  section: StringFilterInput
}

input ComponentCommonNavbarInput {
  id: ID
  nav_item: [ComponentCommonNavItemInput]
  section: String
}

type ComponentCommonNewOverview {
  date: Date
  id: ID!
  overview_text: String
  section: String
  writer_name: String
}

input ComponentCommonNewOverviewFiltersInput {
  and: [ComponentCommonNewOverviewFiltersInput]
  date: DateFilterInput
  not: ComponentCommonNewOverviewFiltersInput
  or: [ComponentCommonNewOverviewFiltersInput]
  overview_text: StringFilterInput
  section: StringFilterInput
  writer_name: StringFilterInput
}

input ComponentCommonNewOverviewInput {
  date: Date
  id: ID
  overview_text: String
  section: String
  writer_name: String
}

type ComponentCommonPartners {
  id: ID!
  images(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection!
  title: String!
}

input ComponentCommonPartnersFiltersInput {
  and: [ComponentCommonPartnersFiltersInput]
  not: ComponentCommonPartnersFiltersInput
  or: [ComponentCommonPartnersFiltersInput]
  title: StringFilterInput
}

input ComponentCommonPartnersInput {
  id: ID
  images: [ID]
  title: String
}

type ComponentCommonRecommendedCollege {
  colleges(filters: CollegeFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CollegeRelationResponseCollection
  id: ID!
  sections(filters: CollegeFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CollegeRelationResponseCollection
}

input ComponentCommonRecommendedCollegeFiltersInput {
  and: [ComponentCommonRecommendedCollegeFiltersInput]
  colleges: CollegeFiltersInput
  not: ComponentCommonRecommendedCollegeFiltersInput
  or: [ComponentCommonRecommendedCollegeFiltersInput]
  sections: CollegeFiltersInput
}

input ComponentCommonRecommendedCollegeInput {
  colleges: [ID]
  id: ID
  sections: [ID]
}

type ComponentCommonRecommendedCourses {
  courses(filters: CourseFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CourseRelationResponseCollection
  id: ID!
}

input ComponentCommonRecommendedCoursesFiltersInput {
  and: [ComponentCommonRecommendedCoursesFiltersInput]
  courses: CourseFiltersInput
  not: ComponentCommonRecommendedCoursesFiltersInput
  or: [ComponentCommonRecommendedCoursesFiltersInput]
}

input ComponentCommonRecommendedCoursesInput {
  courses: [ID]
  id: ID
}

type ComponentCommonRecommendedExams {
  exams(filters: ExamFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ExamRelationResponseCollection
  id: ID!
}

input ComponentCommonRecommendedExamsFiltersInput {
  and: [ComponentCommonRecommendedExamsFiltersInput]
  exams: ExamFiltersInput
  not: ComponentCommonRecommendedExamsFiltersInput
  or: [ComponentCommonRecommendedExamsFiltersInput]
}

input ComponentCommonRecommendedExamsInput {
  exams: [ID]
  id: ID
}

type ComponentCommonResultDate {
  endDate: Date
  id: ID!
  startDate: Date
}

input ComponentCommonResultDateFiltersInput {
  and: [ComponentCommonResultDateFiltersInput]
  endDate: DateFilterInput
  not: ComponentCommonResultDateFiltersInput
  or: [ComponentCommonResultDateFiltersInput]
  startDate: DateFilterInput
}

input ComponentCommonResultDateInput {
  endDate: Date
  id: ID
  startDate: Date
}

type ComponentCommonReviewComponent {
  dislikes(filters: ComponentCommonDislikesFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentCommonDislikes]
  id: ID!
  likes(filters: ComponentCommonLikesFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentCommonLikes]
}

input ComponentCommonReviewComponentFiltersInput {
  and: [ComponentCommonReviewComponentFiltersInput]
  dislikes: ComponentCommonDislikesFiltersInput
  likes: ComponentCommonLikesFiltersInput
  not: ComponentCommonReviewComponentFiltersInput
  or: [ComponentCommonReviewComponentFiltersInput]
}

input ComponentCommonReviewComponentInput {
  dislikes: [ComponentCommonDislikesInput]
  id: ID
  likes: [ComponentCommonLikesInput]
}

type ComponentCommonSection2 {
  card1: ComponentCommonCard1
  card2: ComponentCommonCard2
  card3: ComponentCommonCard3
  id: ID!
}

input ComponentCommonSection2FiltersInput {
  and: [ComponentCommonSection2FiltersInput]
  card1: ComponentCommonCard1FiltersInput
  card2: ComponentCommonCard2FiltersInput
  card3: ComponentCommonCard3FiltersInput
  not: ComponentCommonSection2FiltersInput
  or: [ComponentCommonSection2FiltersInput]
}

input ComponentCommonSection2Input {
  card1: ComponentCommonCard1Input
  card2: ComponentCommonCard2Input
  card3: ComponentCommonCard3Input
  id: ID
}

type ComponentCommonSection3 {
  button: ComponentCommonButton
  id: ID!
  text1: String!
  title: String!
}

input ComponentCommonSection3FiltersInput {
  and: [ComponentCommonSection3FiltersInput]
  button: ComponentCommonButtonFiltersInput
  not: ComponentCommonSection3FiltersInput
  or: [ComponentCommonSection3FiltersInput]
  text1: StringFilterInput
  title: StringFilterInput
}

input ComponentCommonSection3Input {
  button: ComponentCommonButtonInput
  id: ID
  text1: String
  title: String
}

type ComponentCommonSeo {
  favicon: UploadFileEntityResponse
  favicon_alt_text: String
  id: ID!
  page_canonical_url: String
  page_description: String
  page_og_description: String
  page_og_title: String
  page_og_url: String
  page_title: String!
}

input ComponentCommonSeoFiltersInput {
  and: [ComponentCommonSeoFiltersInput]
  favicon_alt_text: StringFilterInput
  not: ComponentCommonSeoFiltersInput
  or: [ComponentCommonSeoFiltersInput]
  page_canonical_url: StringFilterInput
  page_description: StringFilterInput
  page_og_description: StringFilterInput
  page_og_title: StringFilterInput
  page_og_url: StringFilterInput
  page_title: StringFilterInput
}

input ComponentCommonSeoInput {
  favicon: ID
  favicon_alt_text: String
  id: ID
  page_canonical_url: String
  page_description: String
  page_og_description: String
  page_og_title: String
  page_og_url: String
  page_title: String
}

type ComponentCommonStepDescription {
  details: String
  heading: String
  id: ID!
}

input ComponentCommonStepDescriptionFiltersInput {
  and: [ComponentCommonStepDescriptionFiltersInput]
  details: StringFilterInput
  heading: StringFilterInput
  not: ComponentCommonStepDescriptionFiltersInput
  or: [ComponentCommonStepDescriptionFiltersInput]
}

input ComponentCommonStepDescriptionInput {
  details: String
  heading: String
  id: ID
}

type ComponentCommonTabData {
  heading: String
  id: ID!
}

input ComponentCommonTabDataFiltersInput {
  and: [ComponentCommonTabDataFiltersInput]
  heading: StringFilterInput
  not: ComponentCommonTabDataFiltersInput
  or: [ComponentCommonTabDataFiltersInput]
}

input ComponentCommonTabDataInput {
  heading: String
  id: ID
}

type ComponentCommonTitle {
  id: ID!
  t1: String!
  t2: String!
  t3: String!
}

input ComponentCommonTitleFiltersInput {
  and: [ComponentCommonTitleFiltersInput]
  not: ComponentCommonTitleFiltersInput
  or: [ComponentCommonTitleFiltersInput]
  t1: StringFilterInput
  t2: StringFilterInput
  t3: StringFilterInput
}

input ComponentCommonTitleInput {
  id: ID
  t1: String
  t2: String
  t3: String
}

type ComponentCommonTopColleges {
  colleges: ComponentCommonColleges
  id: ID!
  title: ComponentCollegesTitle
}

input ComponentCommonTopCollegesFiltersInput {
  and: [ComponentCommonTopCollegesFiltersInput]
  colleges: ComponentCommonCollegesFiltersInput
  not: ComponentCommonTopCollegesFiltersInput
  or: [ComponentCommonTopCollegesFiltersInput]
  title: ComponentCollegesTitleFiltersInput
}

input ComponentCommonTopCollegesInput {
  colleges: ComponentCommonCollegesInput
  id: ID
  title: ComponentCollegesTitleInput
}

type ComponentCourseCourse {
  course_fee: Long
  course_lebel: String
  course_name: CourseEntityResponse
  exam_accepted(filters: ExamFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ExamRelationResponseCollection
  id: ID!
  specializations(filters: SpecializationFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): SpecializationRelationResponseCollection
}

input ComponentCourseCourseFiltersInput {
  and: [ComponentCourseCourseFiltersInput]
  course_fee: LongFilterInput
  course_lebel: StringFilterInput
  course_name: CourseFiltersInput
  exam_accepted: ExamFiltersInput
  not: ComponentCourseCourseFiltersInput
  or: [ComponentCourseCourseFiltersInput]
  specializations: SpecializationFiltersInput
}

input ComponentCourseCourseInput {
  course_fee: Long
  course_lebel: String
  course_name: ID
  exam_accepted: [ID]
  id: ID
  specializations: [ID]
}

type ComponentCourseCourses {
  id: ID!
  section: String
}

input ComponentCourseCoursesFiltersInput {
  and: [ComponentCourseCoursesFiltersInput]
  not: ComponentCourseCoursesFiltersInput
  or: [ComponentCourseCoursesFiltersInput]
  section: StringFilterInput
}

input ComponentCourseCoursesInput {
  id: ID
  section: String
}

type ComponentCourseSpecialisation {
  id: ID!
  title: String
}

input ComponentCourseSpecialisationFiltersInput {
  and: [ComponentCourseSpecialisationFiltersInput]
  not: ComponentCourseSpecialisationFiltersInput
  or: [ComponentCourseSpecialisationFiltersInput]
  title: StringFilterInput
}

input ComponentCourseSpecialisationInput {
  id: ID
  title: String
}

type ComponentFaqFaqElements {
  Answer: String
  Question: String
  id: ID!
}

input ComponentFaqFaqElementsFiltersInput {
  Answer: StringFilterInput
  Question: StringFilterInput
  and: [ComponentFaqFaqElementsFiltersInput]
  not: ComponentFaqFaqElementsFiltersInput
  or: [ComponentFaqFaqElementsFiltersInput]
}

input ComponentFaqFaqElementsInput {
  Answer: String
  Question: String
  id: ID
}

type ComponentTableColumn {
  id: ID!
  is_heading: ENUM_COMPONENTTABLECOLUMN_IS_HEADING
  value: String
}

input ComponentTableColumnFiltersInput {
  and: [ComponentTableColumnFiltersInput]
  is_heading: StringFilterInput
  not: ComponentTableColumnFiltersInput
  or: [ComponentTableColumnFiltersInput]
  value: StringFilterInput
}

input ComponentTableColumnInput {
  id: ID
  is_heading: ENUM_COMPONENTTABLECOLUMN_IS_HEADING
  value: String
}

type ComponentTableRow {
  col(filters: ComponentTableColumnFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentTableColumn]
  id: ID!
}

input ComponentTableRowFiltersInput {
  and: [ComponentTableRowFiltersInput]
  col: ComponentTableColumnFiltersInput
  not: ComponentTableRowFiltersInput
  or: [ComponentTableRowFiltersInput]
}

input ComponentTableRowInput {
  col: [ComponentTableColumnInput]
  id: ID
}

type ComponentTableTable {
  id: ID!
  row(filters: ComponentTableRowFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentTableRow]
}

input ComponentTableTableFiltersInput {
  and: [ComponentTableTableFiltersInput]
  not: ComponentTableTableFiltersInput
  or: [ComponentTableTableFiltersInput]
  row: ComponentTableRowFiltersInput
}

input ComponentTableTableInput {
  id: ID
  row: [ComponentTableRowInput]
}

type Country {
  blog(filters: BlogFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): BlogRelationResponseCollection
  colleges(filters: CollegeFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CollegeRelationResponseCollection
  country_name: String
  createdAt: DateTime
  publishedAt: DateTime
  scholarships(filters: ScholarshipFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ScholarshipRelationResponseCollection
  states(filters: StateFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): StateRelationResponseCollection
  updatedAt: DateTime
}

type CountryEntity {
  attributes: Country
  id: ID
}

type CountryEntityResponse {
  data: CountryEntity
}

type CountryEntityResponseCollection {
  data: [CountryEntity!]!
  meta: ResponseCollectionMeta!
}

input CountryFiltersInput {
  and: [CountryFiltersInput]
  blog: BlogFiltersInput
  colleges: CollegeFiltersInput
  country_name: StringFilterInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: CountryFiltersInput
  or: [CountryFiltersInput]
  publishedAt: DateTimeFilterInput
  scholarships: ScholarshipFiltersInput
  states: StateFiltersInput
  updatedAt: DateTimeFilterInput
}

input CountryInput {
  blog: [ID]
  colleges: [ID]
  country_name: String
  publishedAt: DateTime
  scholarships: [ID]
  states: [ID]
}

type CountryRelationResponseCollection {
  data: [CountryEntity!]!
}

type Course {
  approvedBy(filters: OrganisationFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): OrganisationRelationResponseCollection
  banner(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
  blog(filters: BlogFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): BlogRelationResponseCollection
  college_type: CollegesTypeEntityResponse
  courseLevels(filters: CourseLevelFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CourseLevelRelationResponseCollection
  course_name: String!
  course_url: String!
  createdAt: DateTime
  is_top: Boolean
  logo: UploadFileEntityResponse
  navbars(filters: NavbarFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): NavbarRelationResponseCollection
  news(filters: NewFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): NewRelationResponseCollection
  page_data: [CoursePageDataDynamicZone]
  pin_code: Int
  publishedAt: DateTime
  review_component: ComponentCommonReviewComponent!
  seo: ComponentCommonSeo
  specializations(filters: SpecializationFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): SpecializationRelationResponseCollection
  state: StateEntityResponse
  streams(filters: StreamFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): StreamRelationResponseCollection
  updatedAt: DateTime
  user_forms(filters: UserFormFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): UserFormRelationResponseCollection
}

type CourseEntity {
  attributes: Course
  id: ID
}

type CourseEntityResponse {
  data: CourseEntity
}

type CourseEntityResponseCollection {
  data: [CourseEntity!]!
  meta: ResponseCollectionMeta!
}

input CourseFiltersInput {
  and: [CourseFiltersInput]
  approvedBy: OrganisationFiltersInput
  blog: BlogFiltersInput
  college_type: CollegesTypeFiltersInput
  courseLevels: CourseLevelFiltersInput
  course_name: StringFilterInput
  course_url: StringFilterInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  is_top: BooleanFilterInput
  navbars: NavbarFiltersInput
  news: NewFiltersInput
  not: CourseFiltersInput
  or: [CourseFiltersInput]
  pin_code: IntFilterInput
  publishedAt: DateTimeFilterInput
  review_component: ComponentCommonReviewComponentFiltersInput
  seo: ComponentCommonSeoFiltersInput
  specializations: SpecializationFiltersInput
  state: StateFiltersInput
  streams: StreamFiltersInput
  updatedAt: DateTimeFilterInput
  user_forms: UserFormFiltersInput
}

input CourseInput {
  approvedBy: [ID]
  banner: [ID]
  blog: [ID]
  college_type: ID
  courseLevels: [ID]
  course_name: String
  course_url: String
  is_top: Boolean
  logo: ID
  navbars: [ID]
  news: [ID]
  page_data: [CoursePageDataDynamicZoneInput!]
  pin_code: Int
  publishedAt: DateTime
  review_component: ComponentCommonReviewComponentInput
  seo: ComponentCommonSeoInput
  specializations: [ID]
  state: ID
  streams: [ID]
  user_forms: [ID]
}

type CourseLevel {
  course_level_name: String
  courses(filters: CourseFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CourseRelationResponseCollection
  createdAt: DateTime
  publishedAt: DateTime
  updatedAt: DateTime
}

type CourseLevelEntity {
  attributes: CourseLevel
  id: ID
}

type CourseLevelEntityResponse {
  data: CourseLevelEntity
}

type CourseLevelEntityResponseCollection {
  data: [CourseLevelEntity!]!
  meta: ResponseCollectionMeta!
}

input CourseLevelFiltersInput {
  and: [CourseLevelFiltersInput]
  course_level_name: StringFilterInput
  courses: CourseFiltersInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: CourseLevelFiltersInput
  or: [CourseLevelFiltersInput]
  publishedAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
}

input CourseLevelInput {
  course_level_name: String
  courses: [ID]
  publishedAt: DateTime
}

type CourseLevelRelationResponseCollection {
  data: [CourseLevelEntity!]!
}

union CoursePageDataDynamicZone = ComponentCommonBannerComponent | ComponentCommonFaq | ComponentCommonGallery | ComponentCommonNewOverview | ComponentCommonRecommendedCollege | ComponentCommonRecommendedCourses | ComponentCommonRecommendedExams | Error

scalar CoursePageDataDynamicZoneInput

type CourseRelationResponseCollection {
  data: [CourseEntity!]!
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

input DateFilterInput {
  and: [Date]
  between: [Date]
  contains: Date
  containsi: Date
  endsWith: Date
  eq: Date
  eqi: Date
  gt: Date
  gte: Date
  in: [Date]
  lt: Date
  lte: Date
  ne: Date
  nei: Date
  not: DateFilterInput
  notContains: Date
  notContainsi: Date
  notIn: [Date]
  notNull: Boolean
  null: Boolean
  or: [Date]
  startsWith: Date
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DateTimeFilterInput {
  and: [DateTime]
  between: [DateTime]
  contains: DateTime
  containsi: DateTime
  endsWith: DateTime
  eq: DateTime
  eqi: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  ne: DateTime
  nei: DateTime
  not: DateTimeFilterInput
  notContains: DateTime
  notContainsi: DateTime
  notIn: [DateTime]
  notNull: Boolean
  null: Boolean
  or: [DateTime]
  startsWith: DateTime
}

type Degree {
  college: CollegeEntityResponse
  createdAt: DateTime
  icon(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection!
  name: String!
  publishedAt: DateTime
  updatedAt: DateTime
}

type DegreeEntity {
  attributes: Degree
  id: ID
}

type DegreeEntityResponse {
  data: DegreeEntity
}

type DegreeEntityResponseCollection {
  data: [DegreeEntity!]!
  meta: ResponseCollectionMeta!
}

input DegreeFiltersInput {
  and: [DegreeFiltersInput]
  college: CollegeFiltersInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: DegreeFiltersInput
  or: [DegreeFiltersInput]
  publishedAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
}

input DegreeInput {
  college: ID
  icon: [ID]
  name: String
  publishedAt: DateTime
}

type DegreeRelationResponseCollection {
  data: [DegreeEntity!]!
}

type DiscussionForum {
  colleges(filters: CollegeFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CollegeRelationResponseCollection
  createdAt: DateTime
  discussion_forum_title: String!
  publishedAt: DateTime
  scholarships(filters: ScholarshipFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ScholarshipRelationResponseCollection
  updatedAt: DateTime
}

type DiscussionForumEntity {
  attributes: DiscussionForum
  id: ID
}

type DiscussionForumEntityResponse {
  data: DiscussionForumEntity
}

type DiscussionForumEntityResponseCollection {
  data: [DiscussionForumEntity!]!
  meta: ResponseCollectionMeta!
}

input DiscussionForumFiltersInput {
  and: [DiscussionForumFiltersInput]
  colleges: CollegeFiltersInput
  createdAt: DateTimeFilterInput
  discussion_forum_title: StringFilterInput
  id: IDFilterInput
  not: DiscussionForumFiltersInput
  or: [DiscussionForumFiltersInput]
  publishedAt: DateTimeFilterInput
  scholarships: ScholarshipFiltersInput
  updatedAt: DateTimeFilterInput
}

input DiscussionForumInput {
  colleges: [ID]
  discussion_forum_title: String
  publishedAt: DateTime
  scholarships: [ID]
}

type DiscussionForumRelationResponseCollection {
  data: [DiscussionForumEntity!]!
}

enum ENUM_COMPONENTCOMMONFIELD_FILED_TYPE {
  board
  course
  course_level
  email
  filled_exams
  gender
  isWhatsAppSame
  name
  otp
  passing_year
  phone
  preffered_colleges
  score
  short_text
  stream
}

enum ENUM_COMPONENTTABLECOLUMN_IS_HEADING {
  no
  yes
}

enum ENUM_NEW_TYPE {
  blog
  news
}

type Error {
  code: String!
  message: String
}

type Exam {
  applicationDate: ComponentCommonApplicationDate
  banner(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
  blog(filters: BlogFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): BlogRelationResponseCollection
  createdAt: DateTime
  examLevel(filters: ExamLevelFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ExamLevelRelationResponseCollection
  examMode: ExamModeEntityResponse
  exam_name: String
  exam_title: String
  isFeaturedExam: Boolean
  logo: UploadFileEntityResponse
  navbars(filters: NavbarFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): NavbarRelationResponseCollection
  news(filters: NewFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): NewRelationResponseCollection
  pageData: [ExamPageDataDynamicZone]
  publishedAt: DateTime
  resultDate: ComponentCommonResultDate
  streams(filters: StreamFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): StreamRelationResponseCollection
  updatedAt: DateTime
  url: String
  user_forms(filters: UserFormFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): UserFormRelationResponseCollection
}

type ExamEntity {
  attributes: Exam
  id: ID
}

type ExamEntityResponse {
  data: ExamEntity
}

type ExamEntityResponseCollection {
  data: [ExamEntity!]!
  meta: ResponseCollectionMeta!
}

input ExamFiltersInput {
  and: [ExamFiltersInput]
  applicationDate: ComponentCommonApplicationDateFiltersInput
  blog: BlogFiltersInput
  createdAt: DateTimeFilterInput
  examLevel: ExamLevelFiltersInput
  examMode: ExamModeFiltersInput
  exam_name: StringFilterInput
  exam_title: StringFilterInput
  id: IDFilterInput
  isFeaturedExam: BooleanFilterInput
  navbars: NavbarFiltersInput
  news: NewFiltersInput
  not: ExamFiltersInput
  or: [ExamFiltersInput]
  publishedAt: DateTimeFilterInput
  resultDate: ComponentCommonResultDateFiltersInput
  streams: StreamFiltersInput
  updatedAt: DateTimeFilterInput
  url: StringFilterInput
  user_forms: UserFormFiltersInput
}

input ExamInput {
  applicationDate: ComponentCommonApplicationDateInput
  banner: [ID]
  blog: [ID]
  examLevel: [ID]
  examMode: ID
  exam_name: String
  exam_title: String
  isFeaturedExam: Boolean
  logo: ID
  navbars: [ID]
  news: [ID]
  pageData: [ExamPageDataDynamicZoneInput!]
  publishedAt: DateTime
  resultDate: ComponentCommonResultDateInput
  streams: [ID]
  url: String
  user_forms: [ID]
}

type ExamLevel {
  createdAt: DateTime
  exam_level_name: String
  exams(filters: ExamFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ExamRelationResponseCollection
  publishedAt: DateTime
  updatedAt: DateTime
}

type ExamLevelEntity {
  attributes: ExamLevel
  id: ID
}

type ExamLevelEntityResponse {
  data: ExamLevelEntity
}

type ExamLevelEntityResponseCollection {
  data: [ExamLevelEntity!]!
  meta: ResponseCollectionMeta!
}

input ExamLevelFiltersInput {
  and: [ExamLevelFiltersInput]
  createdAt: DateTimeFilterInput
  exam_level_name: StringFilterInput
  exams: ExamFiltersInput
  id: IDFilterInput
  not: ExamLevelFiltersInput
  or: [ExamLevelFiltersInput]
  publishedAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
}

input ExamLevelInput {
  exam_level_name: String
  exams: [ID]
  publishedAt: DateTime
}

type ExamLevelRelationResponseCollection {
  data: [ExamLevelEntity!]!
}

type ExamMode {
  createdAt: DateTime
  exam_mode: String
  exams(filters: ExamFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ExamRelationResponseCollection
  publishedAt: DateTime
  updatedAt: DateTime
}

type ExamModeEntity {
  attributes: ExamMode
  id: ID
}

type ExamModeEntityResponse {
  data: ExamModeEntity
}

type ExamModeEntityResponseCollection {
  data: [ExamModeEntity!]!
  meta: ResponseCollectionMeta!
}

input ExamModeFiltersInput {
  and: [ExamModeFiltersInput]
  createdAt: DateTimeFilterInput
  exam_mode: StringFilterInput
  exams: ExamFiltersInput
  id: IDFilterInput
  not: ExamModeFiltersInput
  or: [ExamModeFiltersInput]
  publishedAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
}

input ExamModeInput {
  exam_mode: String
  exams: [ID]
  publishedAt: DateTime
}

type ExamModeRelationResponseCollection {
  data: [ExamModeEntity!]!
}

union ExamPageDataDynamicZone = ComponentCommonFaq | ComponentCommonGallery | ComponentCommonTabData | Error

scalar ExamPageDataDynamicZoneInput

type ExamRelationResponseCollection {
  data: [ExamEntity!]!
}

input FileInfoInput {
  alternativeText: String
  caption: String
  name: String
}

input FloatFilterInput {
  and: [Float]
  between: [Float]
  contains: Float
  containsi: Float
  endsWith: Float
  eq: Float
  eqi: Float
  gt: Float
  gte: Float
  in: [Float]
  lt: Float
  lte: Float
  ne: Float
  nei: Float
  not: FloatFilterInput
  notContains: Float
  notContainsi: Float
  notIn: [Float]
  notNull: Boolean
  null: Boolean
  or: [Float]
  startsWith: Float
}

union GenericMorph = Blog | Button | City | College | CollegesType | ComponentCollegesTitle | ComponentCommonApplicationDate | ComponentCommonBanner1 | ComponentCommonBanner2 | ComponentCommonBannerComponent | ComponentCommonBlogsAndOthers | ComponentCommonButton | ComponentCommonButton1 | ComponentCommonButton2 | ComponentCommonCard1 | ComponentCommonCard2 | ComponentCommonCard3 | ComponentCommonColleges | ComponentCommonCounsellingPackages | ComponentCommonCounsellingPackagesCards | ComponentCommonDislikes | ComponentCommonFaq | ComponentCommonField | ComponentCommonFormStape | ComponentCommonGallery | ComponentCommonGoogleAds | ComponentCommonHomebanner | ComponentCommonLikes | ComponentCommonNavItem | ComponentCommonNavbar | ComponentCommonNewOverview | ComponentCommonPartners | ComponentCommonRecommendedCollege | ComponentCommonRecommendedCourses | ComponentCommonRecommendedExams | ComponentCommonResultDate | ComponentCommonReviewComponent | ComponentCommonSection2 | ComponentCommonSection3 | ComponentCommonSeo | ComponentCommonStepDescription | ComponentCommonTabData | ComponentCommonTitle | ComponentCommonTopColleges | ComponentCourseCourse | ComponentCourseCourses | ComponentCourseSpecialisation | ComponentFaqFaqElements | ComponentTableColumn | ComponentTableRow | ComponentTableTable | Country | Course | CourseLevel | Degree | DiscussionForum | Exam | ExamLevel | ExamMode | HeroSection | I18NLocale | List | Navbar | New | NewsCategory | Organisation | PopularCompany | RankingBody | Scholarship | ScholarshipType | Specialization | State | Step | Stream | Tag | Testimonial | UploadFile | UploadFolder | UserData | UserForm | UsersMetaData | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsUser

type HeroSection {
  CounsellingPackages: ComponentCommonCounsellingPackages
  banner1: ComponentCommonBanner1
  banner2: ComponentCommonBanner2
  createdAt: DateTime
  homebanner: ComponentCommonHomebanner
  partners: ComponentCommonPartners
  publishedAt: DateTime
  section2: ComponentCommonSection2
  updatedAt: DateTime
}

type HeroSectionEntity {
  attributes: HeroSection
  id: ID
}

type HeroSectionEntityResponse {
  data: HeroSectionEntity
}

type HeroSectionEntityResponseCollection {
  data: [HeroSectionEntity!]!
  meta: ResponseCollectionMeta!
}

input HeroSectionFiltersInput {
  CounsellingPackages: ComponentCommonCounsellingPackagesFiltersInput
  and: [HeroSectionFiltersInput]
  banner1: ComponentCommonBanner1FiltersInput
  banner2: ComponentCommonBanner2FiltersInput
  createdAt: DateTimeFilterInput
  homebanner: ComponentCommonHomebannerFiltersInput
  id: IDFilterInput
  not: HeroSectionFiltersInput
  or: [HeroSectionFiltersInput]
  partners: ComponentCommonPartnersFiltersInput
  publishedAt: DateTimeFilterInput
  section2: ComponentCommonSection2FiltersInput
  updatedAt: DateTimeFilterInput
}

input HeroSectionInput {
  CounsellingPackages: ComponentCommonCounsellingPackagesInput
  banner1: ComponentCommonBanner1Input
  banner2: ComponentCommonBanner2Input
  homebanner: ComponentCommonHomebannerInput
  partners: ComponentCommonPartnersInput
  publishedAt: DateTime
  section2: ComponentCommonSection2Input
}

type HeroSectionRelationResponseCollection {
  data: [HeroSectionEntity!]!
}

type I18NLocale {
  code: String
  createdAt: DateTime
  name: String
  updatedAt: DateTime
}

"""A string used to identify an i18n locale"""
scalar I18NLocaleCode

type I18NLocaleEntity {
  attributes: I18NLocale
  id: ID
}

type I18NLocaleEntityResponse {
  data: I18NLocaleEntity
}

type I18NLocaleEntityResponseCollection {
  data: [I18NLocaleEntity!]!
  meta: ResponseCollectionMeta!
}

input I18NLocaleFiltersInput {
  and: [I18NLocaleFiltersInput]
  code: StringFilterInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: I18NLocaleFiltersInput
  or: [I18NLocaleFiltersInput]
  updatedAt: DateTimeFilterInput
}

input I18NLocaleInput {
  code: String
  name: String
}

type I18NLocaleRelationResponseCollection {
  data: [I18NLocaleEntity!]!
}

input IDFilterInput {
  and: [ID]
  between: [ID]
  contains: ID
  containsi: ID
  endsWith: ID
  eq: ID
  eqi: ID
  gt: ID
  gte: ID
  in: [ID]
  lt: ID
  lte: ID
  ne: ID
  nei: ID
  not: IDFilterInput
  notContains: ID
  notContainsi: ID
  notIn: [ID]
  notNull: Boolean
  null: Boolean
  or: [ID]
  startsWith: ID
}

input IntFilterInput {
  and: [Int]
  between: [Int]
  contains: Int
  containsi: Int
  endsWith: Int
  eq: Int
  eqi: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  ne: Int
  nei: Int
  not: IntFilterInput
  notContains: Int
  notContainsi: Int
  notIn: [Int]
  notNull: Boolean
  null: Boolean
  or: [Int]
  startsWith: Int
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input JSONFilterInput {
  and: [JSON]
  between: [JSON]
  contains: JSON
  containsi: JSON
  endsWith: JSON
  eq: JSON
  eqi: JSON
  gt: JSON
  gte: JSON
  in: [JSON]
  lt: JSON
  lte: JSON
  ne: JSON
  nei: JSON
  not: JSONFilterInput
  notContains: JSON
  notContainsi: JSON
  notIn: [JSON]
  notNull: Boolean
  null: Boolean
  or: [JSON]
  startsWith: JSON
}

type List {
  college: CollegeEntityResponse
  createdAt: DateTime
  isInclude: Boolean!
  publishedAt: DateTime
  text: String!
  updatedAt: DateTime
}

type ListEntity {
  attributes: List
  id: ID
}

type ListEntityResponse {
  data: ListEntity
}

type ListEntityResponseCollection {
  data: [ListEntity!]!
  meta: ResponseCollectionMeta!
}

input ListFiltersInput {
  and: [ListFiltersInput]
  college: CollegeFiltersInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  isInclude: BooleanFilterInput
  not: ListFiltersInput
  or: [ListFiltersInput]
  publishedAt: DateTimeFilterInput
  text: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input ListInput {
  college: ID
  isInclude: Boolean
  publishedAt: DateTime
  text: String
}

type ListRelationResponseCollection {
  data: [ListEntity!]!
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar Long

input LongFilterInput {
  and: [Long]
  between: [Long]
  contains: Long
  containsi: Long
  endsWith: Long
  eq: Long
  eqi: Long
  gt: Long
  gte: Long
  in: [Long]
  lt: Long
  lte: Long
  ne: Long
  nei: Long
  not: LongFilterInput
  notContains: Long
  notContainsi: Long
  notIn: [Long]
  notNull: Boolean
  null: Boolean
  or: [Long]
  startsWith: Long
}

type Mutation {
  """Change user password. Confirm with the current password."""
  changePassword(currentPassword: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
  createBlog(data: BlogInput!): BlogEntityResponse
  createButton(data: ButtonInput!): ButtonEntityResponse
  createCity(data: CityInput!): CityEntityResponse
  createCollege(data: CollegeInput!): CollegeEntityResponse
  createCollegesType(data: CollegesTypeInput!): CollegesTypeEntityResponse
  createCountry(data: CountryInput!): CountryEntityResponse
  createCourse(data: CourseInput!): CourseEntityResponse
  createCourseLevel(data: CourseLevelInput!): CourseLevelEntityResponse
  createDegree(data: DegreeInput!): DegreeEntityResponse
  createDiscussionForum(data: DiscussionForumInput!): DiscussionForumEntityResponse
  createExam(data: ExamInput!): ExamEntityResponse
  createExamLevel(data: ExamLevelInput!): ExamLevelEntityResponse
  createExamMode(data: ExamModeInput!): ExamModeEntityResponse
  createHeroSection(data: HeroSectionInput!): HeroSectionEntityResponse
  createList(data: ListInput!): ListEntityResponse
  createNavbar(data: NavbarInput!): NavbarEntityResponse
  createNew(data: NewInput!): NewEntityResponse
  createNewsCategory(data: NewsCategoryInput!): NewsCategoryEntityResponse
  createOrganisation(data: OrganisationInput!): OrganisationEntityResponse
  createPopularCompany(data: PopularCompanyInput!): PopularCompanyEntityResponse
  createRankingBody(data: RankingBodyInput!): RankingBodyEntityResponse
  createScholarship(data: ScholarshipInput!): ScholarshipEntityResponse
  createScholarshipType(data: ScholarshipTypeInput!): ScholarshipTypeEntityResponse
  createSpecialization(data: SpecializationInput!): SpecializationEntityResponse
  createState(data: StateInput!): StateEntityResponse
  createStep(data: StepInput!): StepEntityResponse
  createStream(data: StreamInput!): StreamEntityResponse
  createTag(data: TagInput!): TagEntityResponse
  createTestimonial(data: TestimonialInput!): TestimonialEntityResponse
  createUploadFile(data: UploadFileInput!): UploadFileEntityResponse
  createUploadFolder(data: UploadFolderInput!): UploadFolderEntityResponse
  createUserData(data: UserDataInput!): UserDataEntityResponse
  createUserForm(data: UserFormInput!): UserFormEntityResponse
  createUsersMetaData(data: UsersMetaDataInput!): UsersMetaDataEntityResponse

  """Create a new role"""
  createUsersPermissionsRole(data: UsersPermissionsRoleInput!): UsersPermissionsCreateRolePayload

  """Create a new user"""
  createUsersPermissionsUser(data: UsersPermissionsUserInput!): UsersPermissionsUserEntityResponse!
  deleteBlog(id: ID!): BlogEntityResponse
  deleteButton(id: ID!): ButtonEntityResponse
  deleteCity(id: ID!): CityEntityResponse
  deleteCollege(id: ID!): CollegeEntityResponse
  deleteCollegesType(id: ID!): CollegesTypeEntityResponse
  deleteCountry(id: ID!): CountryEntityResponse
  deleteCourse(id: ID!): CourseEntityResponse
  deleteCourseLevel(id: ID!): CourseLevelEntityResponse
  deleteDegree(id: ID!): DegreeEntityResponse
  deleteDiscussionForum(id: ID!): DiscussionForumEntityResponse
  deleteExam(id: ID!): ExamEntityResponse
  deleteExamLevel(id: ID!): ExamLevelEntityResponse
  deleteExamMode(id: ID!): ExamModeEntityResponse
  deleteHeroSection(id: ID!): HeroSectionEntityResponse
  deleteList(id: ID!): ListEntityResponse
  deleteNavbar(id: ID!): NavbarEntityResponse
  deleteNew(id: ID!): NewEntityResponse
  deleteNewsCategory(id: ID!): NewsCategoryEntityResponse
  deleteOrganisation(id: ID!): OrganisationEntityResponse
  deletePopularCompany(id: ID!): PopularCompanyEntityResponse
  deleteRankingBody(id: ID!): RankingBodyEntityResponse
  deleteScholarship(id: ID!): ScholarshipEntityResponse
  deleteScholarshipType(id: ID!): ScholarshipTypeEntityResponse
  deleteSpecialization(id: ID!): SpecializationEntityResponse
  deleteState(id: ID!): StateEntityResponse
  deleteStep(id: ID!): StepEntityResponse
  deleteStream(id: ID!): StreamEntityResponse
  deleteTag(id: ID!): TagEntityResponse
  deleteTestimonial(id: ID!): TestimonialEntityResponse
  deleteUploadFile(id: ID!): UploadFileEntityResponse
  deleteUploadFolder(id: ID!): UploadFolderEntityResponse
  deleteUserData(id: ID!): UserDataEntityResponse
  deleteUserForm(id: ID!): UserFormEntityResponse
  deleteUsersMetaData(id: ID!): UsersMetaDataEntityResponse

  """Delete an existing role"""
  deleteUsersPermissionsRole(id: ID!): UsersPermissionsDeleteRolePayload

  """Delete an existing user"""
  deleteUsersPermissionsUser(id: ID!): UsersPermissionsUserEntityResponse!

  """Confirm an email users email address"""
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload

  """Request a reset password token"""
  forgotPassword(email: String!): UsersPermissionsPasswordPayload
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  multipleUpload(field: String, files: [Upload]!, ref: String, refId: ID): [UploadFileEntityResponse]!

  """Register a user"""
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  removeFile(id: ID!): UploadFileEntityResponse

  """
  Reset user password. Confirm with a code (resetToken from forgotPassword)
  """
  resetPassword(code: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
  updateBlog(data: BlogInput!, id: ID!): BlogEntityResponse
  updateButton(data: ButtonInput!, id: ID!): ButtonEntityResponse
  updateCity(data: CityInput!, id: ID!): CityEntityResponse
  updateCollege(data: CollegeInput!, id: ID!): CollegeEntityResponse
  updateCollegesType(data: CollegesTypeInput!, id: ID!): CollegesTypeEntityResponse
  updateCountry(data: CountryInput!, id: ID!): CountryEntityResponse
  updateCourse(data: CourseInput!, id: ID!): CourseEntityResponse
  updateCourseLevel(data: CourseLevelInput!, id: ID!): CourseLevelEntityResponse
  updateDegree(data: DegreeInput!, id: ID!): DegreeEntityResponse
  updateDiscussionForum(data: DiscussionForumInput!, id: ID!): DiscussionForumEntityResponse
  updateExam(data: ExamInput!, id: ID!): ExamEntityResponse
  updateExamLevel(data: ExamLevelInput!, id: ID!): ExamLevelEntityResponse
  updateExamMode(data: ExamModeInput!, id: ID!): ExamModeEntityResponse
  updateFileInfo(id: ID!, info: FileInfoInput): UploadFileEntityResponse!
  updateHeroSection(data: HeroSectionInput!, id: ID!): HeroSectionEntityResponse
  updateList(data: ListInput!, id: ID!): ListEntityResponse
  updateNavbar(data: NavbarInput!, id: ID!): NavbarEntityResponse
  updateNew(data: NewInput!, id: ID!): NewEntityResponse
  updateNewsCategory(data: NewsCategoryInput!, id: ID!): NewsCategoryEntityResponse
  updateOrganisation(data: OrganisationInput!, id: ID!): OrganisationEntityResponse
  updatePopularCompany(data: PopularCompanyInput!, id: ID!): PopularCompanyEntityResponse
  updateRankingBody(data: RankingBodyInput!, id: ID!): RankingBodyEntityResponse
  updateScholarship(data: ScholarshipInput!, id: ID!): ScholarshipEntityResponse
  updateScholarshipType(data: ScholarshipTypeInput!, id: ID!): ScholarshipTypeEntityResponse
  updateSpecialization(data: SpecializationInput!, id: ID!): SpecializationEntityResponse
  updateState(data: StateInput!, id: ID!): StateEntityResponse
  updateStep(data: StepInput!, id: ID!): StepEntityResponse
  updateStream(data: StreamInput!, id: ID!): StreamEntityResponse
  updateTag(data: TagInput!, id: ID!): TagEntityResponse
  updateTestimonial(data: TestimonialInput!, id: ID!): TestimonialEntityResponse
  updateUploadFile(data: UploadFileInput!, id: ID!): UploadFileEntityResponse
  updateUploadFolder(data: UploadFolderInput!, id: ID!): UploadFolderEntityResponse
  updateUserData(data: UserDataInput!, id: ID!): UserDataEntityResponse
  updateUserForm(data: UserFormInput!, id: ID!): UserFormEntityResponse
  updateUsersMetaData(data: UsersMetaDataInput!, id: ID!): UsersMetaDataEntityResponse

  """Update an existing role"""
  updateUsersPermissionsRole(data: UsersPermissionsRoleInput!, id: ID!): UsersPermissionsUpdateRolePayload

  """Update an existing user"""
  updateUsersPermissionsUser(data: UsersPermissionsUserInput!, id: ID!): UsersPermissionsUserEntityResponse!
  upload(field: String, file: Upload!, info: FileInfoInput, ref: String, refId: ID): UploadFileEntityResponse!
}

type Navbar {
  colleges(filters: CollegeFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CollegeRelationResponseCollection
  courses(filters: CourseFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CourseRelationResponseCollection
  createdAt: DateTime
  exams(filters: ExamFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ExamRelationResponseCollection
  publishedAt: DateTime
  title: String!
  updatedAt: DateTime
}

type NavbarEntity {
  attributes: Navbar
  id: ID
}

type NavbarEntityResponse {
  data: NavbarEntity
}

type NavbarEntityResponseCollection {
  data: [NavbarEntity!]!
  meta: ResponseCollectionMeta!
}

input NavbarFiltersInput {
  and: [NavbarFiltersInput]
  colleges: CollegeFiltersInput
  courses: CourseFiltersInput
  createdAt: DateTimeFilterInput
  exams: ExamFiltersInput
  id: IDFilterInput
  not: NavbarFiltersInput
  or: [NavbarFiltersInput]
  publishedAt: DateTimeFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input NavbarInput {
  colleges: [ID]
  courses: [ID]
  exams: [ID]
  publishedAt: DateTime
  title: String
}

type NavbarRelationResponseCollection {
  data: [NavbarEntity!]!
}

type New {
  colleges(filters: CollegeFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CollegeRelationResponseCollection
  content: String!
  courses(filters: CourseFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CourseRelationResponseCollection
  createdAt: DateTime
  exams(filters: ExamFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ExamRelationResponseCollection
  excerpt: String
  featuredImage(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
  name: String!
  newsCategories(filters: NewsCategoryFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): NewsCategoryRelationResponseCollection
  publishedAt: DateTime
  scholarships(filters: ScholarshipFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ScholarshipRelationResponseCollection
  seo: ComponentCommonSeo
  specializations(filters: SpecializationFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): SpecializationRelationResponseCollection
  type: ENUM_NEW_TYPE!
  updatedAt: DateTime
}

type NewEntity {
  attributes: New
  id: ID
}

type NewEntityResponse {
  data: NewEntity
}

type NewEntityResponseCollection {
  data: [NewEntity!]!
  meta: ResponseCollectionMeta!
}

input NewFiltersInput {
  and: [NewFiltersInput]
  colleges: CollegeFiltersInput
  content: StringFilterInput
  courses: CourseFiltersInput
  createdAt: DateTimeFilterInput
  exams: ExamFiltersInput
  excerpt: StringFilterInput
  id: IDFilterInput
  name: StringFilterInput
  newsCategories: NewsCategoryFiltersInput
  not: NewFiltersInput
  or: [NewFiltersInput]
  publishedAt: DateTimeFilterInput
  scholarships: ScholarshipFiltersInput
  seo: ComponentCommonSeoFiltersInput
  specializations: SpecializationFiltersInput
  type: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input NewInput {
  colleges: [ID]
  content: String
  courses: [ID]
  exams: [ID]
  excerpt: String
  featuredImage: [ID]
  name: String
  newsCategories: [ID]
  publishedAt: DateTime
  scholarships: [ID]
  seo: ComponentCommonSeoInput
  specializations: [ID]
  type: ENUM_NEW_TYPE
}

type NewRelationResponseCollection {
  data: [NewEntity!]!
}

type NewsCategory {
  category: String
  createdAt: DateTime
  news(filters: NewFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): NewRelationResponseCollection
  publishedAt: DateTime
  updatedAt: DateTime
}

type NewsCategoryEntity {
  attributes: NewsCategory
  id: ID
}

type NewsCategoryEntityResponse {
  data: NewsCategoryEntity
}

type NewsCategoryEntityResponseCollection {
  data: [NewsCategoryEntity!]!
  meta: ResponseCollectionMeta!
}

input NewsCategoryFiltersInput {
  and: [NewsCategoryFiltersInput]
  category: StringFilterInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  news: NewFiltersInput
  not: NewsCategoryFiltersInput
  or: [NewsCategoryFiltersInput]
  publishedAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
}

input NewsCategoryInput {
  category: String
  news: [ID]
  publishedAt: DateTime
}

type NewsCategoryRelationResponseCollection {
  data: [NewsCategoryEntity!]!
}

type Organisation {
  colleges(filters: CollegeFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CollegeRelationResponseCollection
  courses(filters: CourseFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CourseRelationResponseCollection
  createdAt: DateTime
  organisation_logo(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection!
  organisation_name: String!
  publishedAt: DateTime
  scholarships(filters: ScholarshipFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ScholarshipRelationResponseCollection
  updatedAt: DateTime
}

type OrganisationEntity {
  attributes: Organisation
  id: ID
}

type OrganisationEntityResponse {
  data: OrganisationEntity
}

type OrganisationEntityResponseCollection {
  data: [OrganisationEntity!]!
  meta: ResponseCollectionMeta!
}

input OrganisationFiltersInput {
  and: [OrganisationFiltersInput]
  colleges: CollegeFiltersInput
  courses: CourseFiltersInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: OrganisationFiltersInput
  or: [OrganisationFiltersInput]
  organisation_name: StringFilterInput
  publishedAt: DateTimeFilterInput
  scholarships: ScholarshipFiltersInput
  updatedAt: DateTimeFilterInput
}

input OrganisationInput {
  colleges: [ID]
  courses: [ID]
  organisation_logo: [ID]
  organisation_name: String
  publishedAt: DateTime
  scholarships: [ID]
}

type OrganisationRelationResponseCollection {
  data: [OrganisationEntity!]!
}

type Pagination {
  page: Int!
  pageCount: Int!
  pageSize: Int!
  total: Int!
}

input PaginationArg {
  limit: Int
  page: Int
  pageSize: Int
  start: Int
}

type PopularCompany {
  colleges(filters: CollegeFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CollegeRelationResponseCollection
  company_description: String!
  company_name: String!
  createdAt: DateTime
  logo: UploadFileEntityResponse!
  publishedAt: DateTime
  updatedAt: DateTime
}

type PopularCompanyEntity {
  attributes: PopularCompany
  id: ID
}

type PopularCompanyEntityResponse {
  data: PopularCompanyEntity
}

type PopularCompanyEntityResponseCollection {
  data: [PopularCompanyEntity!]!
  meta: ResponseCollectionMeta!
}

input PopularCompanyFiltersInput {
  and: [PopularCompanyFiltersInput]
  colleges: CollegeFiltersInput
  company_description: StringFilterInput
  company_name: StringFilterInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: PopularCompanyFiltersInput
  or: [PopularCompanyFiltersInput]
  publishedAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
}

input PopularCompanyInput {
  colleges: [ID]
  company_description: String
  company_name: String
  logo: ID
  publishedAt: DateTime
}

type PopularCompanyRelationResponseCollection {
  data: [PopularCompanyEntity!]!
}

enum PublicationState {
  LIVE
  PREVIEW
}

type Query {
  blog(id: ID): BlogEntityResponse
  blogs(filters: BlogFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): BlogEntityResponseCollection
  button(id: ID): ButtonEntityResponse
  buttons(filters: ButtonFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ButtonEntityResponseCollection
  cities(filters: CityFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CityEntityResponseCollection
  city(id: ID): CityEntityResponse
  college(id: ID): CollegeEntityResponse
  colleges(filters: CollegeFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CollegeEntityResponseCollection
  collegesType(id: ID): CollegesTypeEntityResponse
  collegesTypes(filters: CollegesTypeFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CollegesTypeEntityResponseCollection
  countries(filters: CountryFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CountryEntityResponseCollection
  country(id: ID): CountryEntityResponse
  course(id: ID): CourseEntityResponse
  courseLevel(id: ID): CourseLevelEntityResponse
  courseLevels(filters: CourseLevelFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CourseLevelEntityResponseCollection
  courses(filters: CourseFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CourseEntityResponseCollection
  degree(id: ID): DegreeEntityResponse
  degrees(filters: DegreeFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): DegreeEntityResponseCollection
  discussionForum(id: ID): DiscussionForumEntityResponse
  discussionForums(filters: DiscussionForumFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): DiscussionForumEntityResponseCollection
  exam(id: ID): ExamEntityResponse
  examLevel(id: ID): ExamLevelEntityResponse
  examLevels(filters: ExamLevelFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ExamLevelEntityResponseCollection
  examMode(id: ID): ExamModeEntityResponse
  examModes(filters: ExamModeFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ExamModeEntityResponseCollection
  exams(filters: ExamFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ExamEntityResponseCollection
  heroSection(id: ID): HeroSectionEntityResponse
  heroSections(filters: HeroSectionFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): HeroSectionEntityResponseCollection
  i18NLocale(id: ID): I18NLocaleEntityResponse
  i18NLocales(filters: I18NLocaleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): I18NLocaleEntityResponseCollection
  list(id: ID): ListEntityResponse
  lists(filters: ListFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ListEntityResponseCollection
  me: UsersPermissionsMe
  navbar(id: ID): NavbarEntityResponse
  navbars(filters: NavbarFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): NavbarEntityResponseCollection
  new(id: ID): NewEntityResponse
  news(filters: NewFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): NewEntityResponseCollection
  newsCategories(filters: NewsCategoryFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): NewsCategoryEntityResponseCollection
  newsCategory(id: ID): NewsCategoryEntityResponse
  organisation(id: ID): OrganisationEntityResponse
  organisations(filters: OrganisationFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): OrganisationEntityResponseCollection
  popularCompanies(filters: PopularCompanyFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): PopularCompanyEntityResponseCollection
  popularCompany(id: ID): PopularCompanyEntityResponse
  rankingBodies(filters: RankingBodyFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): RankingBodyEntityResponseCollection
  rankingBody(id: ID): RankingBodyEntityResponse
  scholarship(id: ID): ScholarshipEntityResponse
  scholarshipType(id: ID): ScholarshipTypeEntityResponse
  scholarshipTypes(filters: ScholarshipTypeFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ScholarshipTypeEntityResponseCollection
  scholarships(filters: ScholarshipFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ScholarshipEntityResponseCollection
  specialization(id: ID): SpecializationEntityResponse
  specializations(filters: SpecializationFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): SpecializationEntityResponseCollection
  state(id: ID): StateEntityResponse
  states(filters: StateFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): StateEntityResponseCollection
  step(id: ID): StepEntityResponse
  steps(filters: StepFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): StepEntityResponseCollection
  stream(id: ID): StreamEntityResponse
  streams(filters: StreamFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): StreamEntityResponseCollection
  tag(id: ID): TagEntityResponse
  tags(filters: TagFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): TagEntityResponseCollection
  testimonial(id: ID): TestimonialEntityResponse
  testimonials(filters: TestimonialFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): TestimonialEntityResponseCollection
  uploadFile(id: ID): UploadFileEntityResponse
  uploadFiles(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileEntityResponseCollection
  uploadFolder(id: ID): UploadFolderEntityResponse
  uploadFolders(filters: UploadFolderFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFolderEntityResponseCollection
  userData(id: ID): UserDataEntityResponse
  userDatas(filters: UserDataFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): UserDataEntityResponseCollection
  userForm(id: ID): UserFormEntityResponse
  userForms(filters: UserFormFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): UserFormEntityResponseCollection
  usersMetaData(id: ID): UsersMetaDataEntityResponse
  usersMetaDatas(filters: UsersMetaDataFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): UsersMetaDataEntityResponseCollection
  usersPermissionsRole(id: ID): UsersPermissionsRoleEntityResponse
  usersPermissionsRoles(filters: UsersPermissionsRoleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsRoleEntityResponseCollection
  usersPermissionsUser(id: ID): UsersPermissionsUserEntityResponse
  usersPermissionsUsers(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserEntityResponseCollection
}

type RankingBody {
  colleges(filters: CollegeFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CollegeRelationResponseCollection
  content_writer: String!
  createdAt: DateTime
  publishedAt: DateTime
  ranking_body_logo(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
  ranking_body_name: String!
  updatedAt: DateTime
}

type RankingBodyEntity {
  attributes: RankingBody
  id: ID
}

type RankingBodyEntityResponse {
  data: RankingBodyEntity
}

type RankingBodyEntityResponseCollection {
  data: [RankingBodyEntity!]!
  meta: ResponseCollectionMeta!
}

input RankingBodyFiltersInput {
  and: [RankingBodyFiltersInput]
  colleges: CollegeFiltersInput
  content_writer: StringFilterInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: RankingBodyFiltersInput
  or: [RankingBodyFiltersInput]
  publishedAt: DateTimeFilterInput
  ranking_body_name: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input RankingBodyInput {
  colleges: [ID]
  content_writer: String
  publishedAt: DateTime
  ranking_body_logo: [ID]
  ranking_body_name: String
}

type RankingBodyRelationResponseCollection {
  data: [RankingBodyEntity!]!
}

type ResponseCollectionMeta {
  pagination: Pagination!
}

type Scholarship {
  amount: Float
  banner(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection!
  blog(filters: BlogFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): BlogRelationResponseCollection
  blogs(filters: BlogFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): BlogRelationResponseCollection
  colleges(filters: CollegeFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CollegeRelationResponseCollection
  conducted_by: OrganisationEntityResponse
  country: CountryEntityResponse
  createdAt: DateTime
  discussion_forums(filters: DiscussionForumFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): DiscussionForumRelationResponseCollection
  eligibility: String!
  gallery(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection!
  is_featured: Boolean
  is_top: Boolean
  logo: UploadFileEntityResponse!
  news(filters: NewFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): NewRelationResponseCollection
  number_of_scholarship: Long
  page_data: [ScholarshipPageDataDynamicZone]
  publishedAt: DateTime
  review_component(filters: ComponentCommonReviewComponentFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentCommonReviewComponent]
  scholarship_title: String!
  scholarship_url: String!
  seo: ComponentCommonSeo
  type: ScholarshipTypeEntityResponse
  updatedAt: DateTime
  user_forms(filters: UserFormFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): UserFormRelationResponseCollection
}

type ScholarshipEntity {
  attributes: Scholarship
  id: ID
}

type ScholarshipEntityResponse {
  data: ScholarshipEntity
}

type ScholarshipEntityResponseCollection {
  data: [ScholarshipEntity!]!
  meta: ResponseCollectionMeta!
}

input ScholarshipFiltersInput {
  amount: FloatFilterInput
  and: [ScholarshipFiltersInput]
  blog: BlogFiltersInput
  blogs: BlogFiltersInput
  colleges: CollegeFiltersInput
  conducted_by: OrganisationFiltersInput
  country: CountryFiltersInput
  createdAt: DateTimeFilterInput
  discussion_forums: DiscussionForumFiltersInput
  eligibility: StringFilterInput
  id: IDFilterInput
  is_featured: BooleanFilterInput
  is_top: BooleanFilterInput
  news: NewFiltersInput
  not: ScholarshipFiltersInput
  number_of_scholarship: LongFilterInput
  or: [ScholarshipFiltersInput]
  publishedAt: DateTimeFilterInput
  review_component: ComponentCommonReviewComponentFiltersInput
  scholarship_title: StringFilterInput
  scholarship_url: StringFilterInput
  seo: ComponentCommonSeoFiltersInput
  type: ScholarshipTypeFiltersInput
  updatedAt: DateTimeFilterInput
  user_forms: UserFormFiltersInput
}

input ScholarshipInput {
  amount: Float
  banner: [ID]
  blog: [ID]
  blogs: [ID]
  colleges: [ID]
  conducted_by: ID
  country: ID
  discussion_forums: [ID]
  eligibility: String
  gallery: [ID]
  is_featured: Boolean
  is_top: Boolean
  logo: ID
  news: [ID]
  number_of_scholarship: Long
  page_data: [ScholarshipPageDataDynamicZoneInput!]
  publishedAt: DateTime
  review_component: [ComponentCommonReviewComponentInput]
  scholarship_title: String
  scholarship_url: String
  seo: ComponentCommonSeoInput
  type: ID
  user_forms: [ID]
}

union ScholarshipPageDataDynamicZone = ComponentCommonBannerComponent | ComponentCommonFaq | ComponentCommonGallery | ComponentCommonNewOverview | ComponentCommonRecommendedCollege | ComponentCommonRecommendedCourses | ComponentCommonRecommendedExams | Error

scalar ScholarshipPageDataDynamicZoneInput

type ScholarshipRelationResponseCollection {
  data: [ScholarshipEntity!]!
}

type ScholarshipType {
  createdAt: DateTime
  publishedAt: DateTime
  scholarship(filters: ScholarshipFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ScholarshipRelationResponseCollection
  title: String!
  updatedAt: DateTime
}

type ScholarshipTypeEntity {
  attributes: ScholarshipType
  id: ID
}

type ScholarshipTypeEntityResponse {
  data: ScholarshipTypeEntity
}

type ScholarshipTypeEntityResponseCollection {
  data: [ScholarshipTypeEntity!]!
  meta: ResponseCollectionMeta!
}

input ScholarshipTypeFiltersInput {
  and: [ScholarshipTypeFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: ScholarshipTypeFiltersInput
  or: [ScholarshipTypeFiltersInput]
  publishedAt: DateTimeFilterInput
  scholarship: ScholarshipFiltersInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input ScholarshipTypeInput {
  publishedAt: DateTime
  scholarship: [ID]
  title: String
}

type ScholarshipTypeRelationResponseCollection {
  data: [ScholarshipTypeEntity!]!
}

type Specialization {
  courses(filters: CourseFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CourseRelationResponseCollection
  createdAt: DateTime
  news(filters: CollegeFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CollegeRelationResponseCollection
  publishedAt: DateTime
  specialization_name: String!
  title: String!
  updatedAt: DateTime
}

type SpecializationEntity {
  attributes: Specialization
  id: ID
}

type SpecializationEntityResponse {
  data: SpecializationEntity
}

type SpecializationEntityResponseCollection {
  data: [SpecializationEntity!]!
  meta: ResponseCollectionMeta!
}

input SpecializationFiltersInput {
  and: [SpecializationFiltersInput]
  courses: CourseFiltersInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  news: CollegeFiltersInput
  not: SpecializationFiltersInput
  or: [SpecializationFiltersInput]
  publishedAt: DateTimeFilterInput
  specialization_name: StringFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input SpecializationInput {
  courses: [ID]
  news: [ID]
  publishedAt: DateTime
  specialization_name: String
  title: String
}

type SpecializationRelationResponseCollection {
  data: [SpecializationEntity!]!
}

type State {
  cities(filters: CityFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CityRelationResponseCollection
  colleges(filters: CollegeFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CollegeRelationResponseCollection
  country: CountryEntityResponse
  courses(filters: CourseFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CourseRelationResponseCollection
  createdAt: DateTime
  name: String!
  publishedAt: DateTime
  updatedAt: DateTime
}

type StateEntity {
  attributes: State
  id: ID
}

type StateEntityResponse {
  data: StateEntity
}

type StateEntityResponseCollection {
  data: [StateEntity!]!
  meta: ResponseCollectionMeta!
}

input StateFiltersInput {
  and: [StateFiltersInput]
  cities: CityFiltersInput
  colleges: CollegeFiltersInput
  country: CountryFiltersInput
  courses: CourseFiltersInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: StateFiltersInput
  or: [StateFiltersInput]
  publishedAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
}

input StateInput {
  cities: [ID]
  colleges: [ID]
  country: ID
  courses: [ID]
  name: String
  publishedAt: DateTime
}

type StateRelationResponseCollection {
  data: [StateEntity!]!
}

type Step {
  colleges(filters: CollegeFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CollegeRelationResponseCollection
  createdAt: DateTime
  publishedAt: DateTime
  text: String!
  updatedAt: DateTime
}

type StepEntity {
  attributes: Step
  id: ID
}

type StepEntityResponse {
  data: StepEntity
}

type StepEntityResponseCollection {
  data: [StepEntity!]!
  meta: ResponseCollectionMeta!
}

input StepFiltersInput {
  and: [StepFiltersInput]
  colleges: CollegeFiltersInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: StepFiltersInput
  or: [StepFiltersInput]
  publishedAt: DateTimeFilterInput
  text: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input StepInput {
  colleges: [ID]
  publishedAt: DateTime
  text: String
}

type StepRelationResponseCollection {
  data: [StepEntity!]!
}

type Stream {
  college_names(filters: CollegeFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CollegeRelationResponseCollection
  content_for_colleges: String
  content_for_courses: String
  content_for_exams: String
  courses(filters: CourseFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CourseRelationResponseCollection
  createdAt: DateTime
  exams(filters: ExamFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ExamRelationResponseCollection
  icon(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
  publishedAt: DateTime
  stream_name: String!
  updatedAt: DateTime
}

type StreamEntity {
  attributes: Stream
  id: ID
}

type StreamEntityResponse {
  data: StreamEntity
}

type StreamEntityResponseCollection {
  data: [StreamEntity!]!
  meta: ResponseCollectionMeta!
}

input StreamFiltersInput {
  and: [StreamFiltersInput]
  college_names: CollegeFiltersInput
  content_for_colleges: StringFilterInput
  content_for_courses: StringFilterInput
  content_for_exams: StringFilterInput
  courses: CourseFiltersInput
  createdAt: DateTimeFilterInput
  exams: ExamFiltersInput
  id: IDFilterInput
  not: StreamFiltersInput
  or: [StreamFiltersInput]
  publishedAt: DateTimeFilterInput
  stream_name: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input StreamInput {
  college_names: [ID]
  content_for_colleges: String
  content_for_courses: String
  content_for_exams: String
  courses: [ID]
  exams: [ID]
  icon: [ID]
  publishedAt: DateTime
  stream_name: String
}

type StreamRelationResponseCollection {
  data: [StreamEntity!]!
}

input StringFilterInput {
  and: [String]
  between: [String]
  contains: String
  containsi: String
  endsWith: String
  eq: String
  eqi: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nei: String
  not: StringFilterInput
  notContains: String
  notContainsi: String
  notIn: [String]
  notNull: Boolean
  null: Boolean
  or: [String]
  startsWith: String
}

type Tag {
  blogs(filters: BlogFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): BlogRelationResponseCollection
  createdAt: DateTime
  publishedAt: DateTime
  tags_name: String!
  updatedAt: DateTime
}

type TagEntity {
  attributes: Tag
  id: ID
}

type TagEntityResponse {
  data: TagEntity
}

type TagEntityResponseCollection {
  data: [TagEntity!]!
  meta: ResponseCollectionMeta!
}

input TagFiltersInput {
  and: [TagFiltersInput]
  blogs: BlogFiltersInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: TagFiltersInput
  or: [TagFiltersInput]
  publishedAt: DateTimeFilterInput
  tags_name: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input TagInput {
  blogs: [ID]
  publishedAt: DateTime
  tags_name: String
}

type TagRelationResponseCollection {
  data: [TagEntity!]!
}

type Testimonial {
  banner: UploadFileEntityResponse
  colleges(filters: CollegeFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CollegeRelationResponseCollection
  commentBy: String
  createdAt: DateTime
  logo: UploadFileEntityResponse
  name: String!
  publishedAt: DateTime
  testimonial: String!
  updatedAt: DateTime
  year: Date!
}

type TestimonialEntity {
  attributes: Testimonial
  id: ID
}

type TestimonialEntityResponse {
  data: TestimonialEntity
}

type TestimonialEntityResponseCollection {
  data: [TestimonialEntity!]!
  meta: ResponseCollectionMeta!
}

input TestimonialFiltersInput {
  and: [TestimonialFiltersInput]
  colleges: CollegeFiltersInput
  commentBy: StringFilterInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: TestimonialFiltersInput
  or: [TestimonialFiltersInput]
  publishedAt: DateTimeFilterInput
  testimonial: StringFilterInput
  updatedAt: DateTimeFilterInput
  year: DateFilterInput
}

input TestimonialInput {
  banner: ID
  colleges: [ID]
  commentBy: String
  logo: ID
  name: String
  publishedAt: DateTime
  testimonial: String
  year: Date
}

type TestimonialRelationResponseCollection {
  data: [TestimonialEntity!]!
}

"""A time string with format HH:mm:ss.SSS"""
scalar Time

input TimeFilterInput {
  and: [Time]
  between: [Time]
  contains: Time
  containsi: Time
  endsWith: Time
  eq: Time
  eqi: Time
  gt: Time
  gte: Time
  in: [Time]
  lt: Time
  lte: Time
  ne: Time
  nei: Time
  not: TimeFilterInput
  notContains: Time
  notContainsi: Time
  notIn: [Time]
  notNull: Boolean
  null: Boolean
  or: [Time]
  startsWith: Time
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  alternativeText: String
  caption: String
  createdAt: DateTime
  ext: String
  formats: JSON
  hash: String!
  height: Int
  mime: String!
  name: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [GenericMorph]
  size: Float!
  updatedAt: DateTime
  url: String!
  width: Int
}

type UploadFileEntity {
  attributes: UploadFile
  id: ID
}

type UploadFileEntityResponse {
  data: UploadFileEntity
}

type UploadFileEntityResponseCollection {
  data: [UploadFileEntity!]!
  meta: ResponseCollectionMeta!
}

input UploadFileFiltersInput {
  alternativeText: StringFilterInput
  and: [UploadFileFiltersInput]
  caption: StringFilterInput
  createdAt: DateTimeFilterInput
  ext: StringFilterInput
  folder: UploadFolderFiltersInput
  folderPath: StringFilterInput
  formats: JSONFilterInput
  hash: StringFilterInput
  height: IntFilterInput
  id: IDFilterInput
  mime: StringFilterInput
  name: StringFilterInput
  not: UploadFileFiltersInput
  or: [UploadFileFiltersInput]
  previewUrl: StringFilterInput
  provider: StringFilterInput
  provider_metadata: JSONFilterInput
  size: FloatFilterInput
  updatedAt: DateTimeFilterInput
  url: StringFilterInput
  width: IntFilterInput
}

input UploadFileInput {
  alternativeText: String
  caption: String
  ext: String
  folder: ID
  folderPath: String
  formats: JSON
  hash: String
  height: Int
  mime: String
  name: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  size: Float
  url: String
  width: Int
}

type UploadFileRelationResponseCollection {
  data: [UploadFileEntity!]!
}

type UploadFolder {
  children(filters: UploadFolderFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFolderRelationResponseCollection
  createdAt: DateTime
  files(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
  name: String!
  parent: UploadFolderEntityResponse
  path: String!
  pathId: Int!
  updatedAt: DateTime
}

type UploadFolderEntity {
  attributes: UploadFolder
  id: ID
}

type UploadFolderEntityResponse {
  data: UploadFolderEntity
}

type UploadFolderEntityResponseCollection {
  data: [UploadFolderEntity!]!
  meta: ResponseCollectionMeta!
}

input UploadFolderFiltersInput {
  and: [UploadFolderFiltersInput]
  children: UploadFolderFiltersInput
  createdAt: DateTimeFilterInput
  files: UploadFileFiltersInput
  id: IDFilterInput
  name: StringFilterInput
  not: UploadFolderFiltersInput
  or: [UploadFolderFiltersInput]
  parent: UploadFolderFiltersInput
  path: StringFilterInput
  pathId: IntFilterInput
  updatedAt: DateTimeFilterInput
}

input UploadFolderInput {
  children: [ID]
  files: [ID]
  name: String
  parent: ID
  path: String
  pathId: Int
}

type UploadFolderRelationResponseCollection {
  data: [UploadFolderEntity!]!
}

type UserData {
  city: String
  course_level: CourseLevelEntityResponse
  createdAt: DateTime
  email: String
  gender: String
  name: String
  number: String
  otp: String
  password: String
  publishedAt: DateTime
  updatedAt: DateTime
  users_meta_datum: UsersMetaDataEntityResponse
}

type UserDataEntity {
  attributes: UserData
  id: ID
}

type UserDataEntityResponse {
  data: UserDataEntity
}

type UserDataEntityResponseCollection {
  data: [UserDataEntity!]!
  meta: ResponseCollectionMeta!
}

input UserDataFiltersInput {
  and: [UserDataFiltersInput]
  city: StringFilterInput
  course_level: CourseLevelFiltersInput
  createdAt: DateTimeFilterInput
  email: StringFilterInput
  gender: StringFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: UserDataFiltersInput
  number: StringFilterInput
  or: [UserDataFiltersInput]
  otp: StringFilterInput
  password: StringFilterInput
  publishedAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  users_meta_datum: UsersMetaDataFiltersInput
}

input UserDataInput {
  city: String
  course_level: ID
  email: String
  gender: String
  name: String
  number: String
  otp: String
  password: String
  publishedAt: DateTime
  users_meta_datum: ID
}

type UserDataRelationResponseCollection {
  data: [UserDataEntity!]!
}

type UserForm {
  colleges(filters: CollegeFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CollegeRelationResponseCollection
  course: CourseEntityResponse
  createdAt: DateTime
  exam: ExamEntityResponse
  form_description: String
  form_stape(filters: ComponentCommonFormStapeFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentCommonFormStape]
  form_title: String
  form_url: String
  publishedAt: DateTime
  scholarship: ScholarshipEntityResponse
  updatedAt: DateTime
}

type UserFormEntity {
  attributes: UserForm
  id: ID
}

type UserFormEntityResponse {
  data: UserFormEntity
}

type UserFormEntityResponseCollection {
  data: [UserFormEntity!]!
  meta: ResponseCollectionMeta!
}

input UserFormFiltersInput {
  and: [UserFormFiltersInput]
  colleges: CollegeFiltersInput
  course: CourseFiltersInput
  createdAt: DateTimeFilterInput
  exam: ExamFiltersInput
  form_description: StringFilterInput
  form_stape: ComponentCommonFormStapeFiltersInput
  form_title: StringFilterInput
  form_url: StringFilterInput
  id: IDFilterInput
  not: UserFormFiltersInput
  or: [UserFormFiltersInput]
  publishedAt: DateTimeFilterInput
  scholarship: ScholarshipFiltersInput
  updatedAt: DateTimeFilterInput
}

input UserFormInput {
  colleges: [ID]
  course: ID
  exam: ID
  form_description: String
  form_stape: [ComponentCommonFormStapeInput]
  form_title: String
  form_url: String
  publishedAt: DateTime
  scholarship: ID
}

type UserFormRelationResponseCollection {
  data: [UserFormEntity!]!
}

type UsersMetaData {
  courseInterested(filters: CourseFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CourseRelationResponseCollection
  createdAt: DateTime
  email: String
  gender: String
  name: String
  number: String
  publishedAt: DateTime
  updatedAt: DateTime
  user_datum: UserDataEntityResponse
}

type UsersMetaDataEntity {
  attributes: UsersMetaData
  id: ID
}

type UsersMetaDataEntityResponse {
  data: UsersMetaDataEntity
}

type UsersMetaDataEntityResponseCollection {
  data: [UsersMetaDataEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersMetaDataFiltersInput {
  and: [UsersMetaDataFiltersInput]
  courseInterested: CourseFiltersInput
  createdAt: DateTimeFilterInput
  email: StringFilterInput
  gender: StringFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: UsersMetaDataFiltersInput
  number: StringFilterInput
  or: [UsersMetaDataFiltersInput]
  publishedAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  user_datum: UserDataFiltersInput
}

input UsersMetaDataInput {
  courseInterested: [ID]
  email: String
  gender: String
  name: String
  number: String
  publishedAt: DateTime
  user_datum: ID
}

type UsersMetaDataRelationResponseCollection {
  data: [UsersMetaDataEntity!]!
}

type UsersPermissionsCreateRolePayload {
  ok: Boolean!
}

type UsersPermissionsDeleteRolePayload {
  ok: Boolean!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String! = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UsersPermissionsMe {
  blocked: Boolean
  confirmed: Boolean
  email: String
  id: ID!
  role: UsersPermissionsMeRole
  username: String!
}

type UsersPermissionsMeRole {
  description: String
  id: ID!
  name: String!
  type: String
}

type UsersPermissionsPasswordPayload {
  ok: Boolean!
}

type UsersPermissionsPermission {
  action: String!
  createdAt: DateTime
  role: UsersPermissionsRoleEntityResponse
  updatedAt: DateTime
}

type UsersPermissionsPermissionEntity {
  attributes: UsersPermissionsPermission
  id: ID
}

type UsersPermissionsPermissionEntityResponse {
  data: UsersPermissionsPermissionEntity
}

type UsersPermissionsPermissionEntityResponseCollection {
  data: [UsersPermissionsPermissionEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsPermissionFiltersInput {
  action: StringFilterInput
  and: [UsersPermissionsPermissionFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: UsersPermissionsPermissionFiltersInput
  or: [UsersPermissionsPermissionFiltersInput]
  role: UsersPermissionsRoleFiltersInput
  updatedAt: DateTimeFilterInput
}

input UsersPermissionsPermissionInput {
  action: String
  role: ID
}

type UsersPermissionsPermissionRelationResponseCollection {
  data: [UsersPermissionsPermissionEntity!]!
}

input UsersPermissionsRegisterInput {
  email: String!
  password: String!
  username: String!
}

type UsersPermissionsRole {
  createdAt: DateTime
  description: String
  name: String!
  permissions(filters: UsersPermissionsPermissionFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsPermissionRelationResponseCollection
  type: String
  updatedAt: DateTime
  users(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserRelationResponseCollection
}

type UsersPermissionsRoleEntity {
  attributes: UsersPermissionsRole
  id: ID
}

type UsersPermissionsRoleEntityResponse {
  data: UsersPermissionsRoleEntity
}

type UsersPermissionsRoleEntityResponseCollection {
  data: [UsersPermissionsRoleEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsRoleFiltersInput {
  and: [UsersPermissionsRoleFiltersInput]
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: UsersPermissionsRoleFiltersInput
  or: [UsersPermissionsRoleFiltersInput]
  permissions: UsersPermissionsPermissionFiltersInput
  type: StringFilterInput
  updatedAt: DateTimeFilterInput
  users: UsersPermissionsUserFiltersInput
}

input UsersPermissionsRoleInput {
  description: String
  name: String
  permissions: [ID]
  type: String
  users: [ID]
}

type UsersPermissionsRoleRelationResponseCollection {
  data: [UsersPermissionsRoleEntity!]!
}

type UsersPermissionsUpdateRolePayload {
  ok: Boolean!
}

type UsersPermissionsUser {
  blocked: Boolean
  confirmed: Boolean
  createdAt: DateTime
  email: String!
  provider: String
  role: UsersPermissionsRoleEntityResponse
  updatedAt: DateTime
  username: String!
}

type UsersPermissionsUserEntity {
  attributes: UsersPermissionsUser
  id: ID
}

type UsersPermissionsUserEntityResponse {
  data: UsersPermissionsUserEntity
}

type UsersPermissionsUserEntityResponseCollection {
  data: [UsersPermissionsUserEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsUserFiltersInput {
  and: [UsersPermissionsUserFiltersInput]
  blocked: BooleanFilterInput
  confirmationToken: StringFilterInput
  confirmed: BooleanFilterInput
  createdAt: DateTimeFilterInput
  email: StringFilterInput
  id: IDFilterInput
  not: UsersPermissionsUserFiltersInput
  or: [UsersPermissionsUserFiltersInput]
  password: StringFilterInput
  provider: StringFilterInput
  resetPasswordToken: StringFilterInput
  role: UsersPermissionsRoleFiltersInput
  updatedAt: DateTimeFilterInput
  username: StringFilterInput
}

input UsersPermissionsUserInput {
  blocked: Boolean
  confirmationToken: String
  confirmed: Boolean
  email: String
  password: String
  provider: String
  resetPasswordToken: String
  role: ID
  username: String
}

type UsersPermissionsUserRelationResponseCollection {
  data: [UsersPermissionsUserEntity!]!
}
